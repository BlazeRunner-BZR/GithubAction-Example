name: Github-Action-Demo
env:
  apikey: "38e53fd821771b102b5bfddc"
  apisecret: "c9fb4b4be583657d952d3d25103b28590811e7b0f43bf8d7d9107b6345ae752f15a21d50"
  testid: "10615531"
  ContinuePipeline: "false"
  showtaillog: "false"
  
on: push

jobs:
  first-job:
    runs-on: ubuntu-latest  
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
    - name: Run Blazemeter test
      uses: blazerunner-g/BlazeAction@v7.9.7
      id: run-test
      with:
        apikey: ${{env.apikey}}
        apisecret: ${{env.apisecret}}
        testid: ${{env.testid}}
        ContinuePipeline: ${{env.ContinuePipeline}}
        showtaillog: ${{env.showtaillog}} 
    - name: Set Variable  
      id: identify
      run: |
        export JSON_DATA='{"test":"test12334545"}'
        echo "::set-output name=json_data::${JSON_DATA}"
        echo "env variable ${{ steps.run-test.outputs.EnvTestVar }}"
        echo "env variable $EnvTestVar"
        echo "env variable $EnvTestVar1"
        echo "env variable $EnvTestVar2"
        echo "env variable $EnvTestVar3"
        echo "env variable $Path"
        echo "env variable ${{env.EnvTestVar}}"
        echo "env variable ${{env.EnvTestVar1}}"
        echo "env variable ${{env.EnvTestVar2}}"
        echo "env variable ${{env.EnvTestVar3}}"
        echo "env variable ${{env.Path}}"
    - name: powershell
      id: identify1
      shell: pwsh
      run: |
        export Json_Output=$global:Test1
        echo "::set-output name=json_data1::${Json_Output}"
        $env:EnvTestVar
        $env:EnvTestVar1
        $env:EnvTestVar2
        $env:EnvTestVar3
        $env:Path
        Get-Content -Path Test
        $global:Test1
    outputs:
      json_data: ${{ steps.identify.outputs.json_data }}
      json_data1: ${{ steps.identify1.outputs.json_data1 }}
      
  second-job:
    needs: first-job
    runs-on: ubuntu-latest
    steps:
      - name: "Get Variable From first Job"
        run: |
          echo "first job data $Json_Data"
          echo "Json output $Json_data1"
        env:
          Json_Data: ${{ needs.first-job.outputs.json_data }}
          Json_data1: ${{ needs.first-job.outputs.json_data1 }}
  third-job:
    needs: [second-job, first-job]
    runs-on: ubuntu-latest
    steps:
      - name: "Get Variable From first Job"
        run: echo "first job data  $Json_Data"
        env:
          Json_Data: ${{ needs.first-job.outputs.json_data }}

# jobs:
#   github-action:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2.3.4
#       - name: Run Blazemeter test
#         uses: blazerunner-g/BlazeAction@v7.9.7
#         id: run-test
#         with:
#           apikey: ${{env.apikey}}
#           apisecret: ${{env.apisecret}}
#           testid: ${{env.testid}}
#           ContinuePipeline: ${{env.ContinuePipeline}}
#           showtaillog: ${{env.showtaillog}} 
#       - name: env-var
#         id: env
#         run: |
#           export env_var_data="hello github action for first jobs"
#           echo "::set-output name=data::${env_var_data}" 
#     outputs:
#       data: ${{ steps.env.outputs.data }}
          
#   first-job:
#     needs: github-action
#     runs-on: ubuntu-latest  
#     steps:
#     - id: identify
#       run: |
#         export JSON_DATA='{"test":"test123"}'
#         echo "::set-output name=json_data::${JSON_DATA}"
#         echo "data of first job: ${{ needs.github-action.outputs.data}}"
#     outputs:
#       json_data: ${{ steps.identify.outputs.json_data }}
      
#   second-job:
#     needs: first-job
#     runs-on: ubuntu-latest
#     steps:
#       - name: "Json Data"
#         run: |
#           echo "JSON_DATA for first job $Json_Data"
#           echo "data : ${{ needs.github-action.outputs.data}}"
#         env:
#           Json_Data: ${{ needs.first-job.outputs.json_data }}
          

#   first-job:
#     runs-on: ubuntu-latest  
#     steps:
#     - uses: actions/checkout@v2

#     - run: mkdir -p path/to/artifact

#     - run: echo {"url":"demo.com"} > path/to/artifact/world.txt

#     - uses: actions/upload-artifact@v2
#       with:
#         name: my-artifact
#         path: path/to/artifact/world.txt

#   second-job:
#     needs: first-job
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2

#     - uses: actions/download-artifact@v2
#       with:
#         name: my-artifact

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v2

#     - name: Cache Primes
#       id: cache-primes
#       uses: actions/cache@v2
#       with:
#         path: prime-numbers
#         key: ${{ runner.os }}-primes

#     - name: Generate Prime Numbers
#       if: steps.cache-primes.outputs.cache-hit != 'true'
#       run: /generate-primes.sh -d prime-numbers

#     - name: Use Prime Numbers
#       run: /primes.sh -d prime-numbers

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v1

#     - name: Cache NPM dependencies
#       uses: actions/cache@v1
#       with:
#         path: ~/.npm
#         key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
#         restore-keys: |
#           ${{ runner.OS }}-npm-cache-

#     - name: Install NPM dependencies
#       run: npm install

# jobs:
#   cache-data:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/cache@v2
#         id: cache-packages  # give it a name for checking the cache hit-or-not
#         with:
#           path: ./packages/  # what we cache: the folder
#           key: ${{ runner.os }}-packages-${{ hashFiles('**/packages*.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-packages-
#       - run: package-installer packages.txt
#         if: steps.cache-packages.outputs.cache-hit != 'true'
